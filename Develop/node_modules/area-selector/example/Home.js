/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */
/*eslint-disable*/
import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Modal,
  Dimensions,
  TouchableHighlight,
  ScrollView,
  Slider,
  Alert
} from 'react-native';

const { width, height } = Dimensions.get('window');
const ASPECT_RATIO = width / height;
const LATITUDE = 37.78825;
const LONGITUDE = -122.4324;
const LATITUDE_DELTA = 0.0922;
const LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;
const randp = require('./Shapes/Polygon')
const randClr = require('./Utilities/RandomColor')

const buttonColor = '#F44336'
const bgcolor = 'white'
var PointsList = require('./PointsList')
import AreaSelector  from './AreaSelector'

const TopButton = ({title,onPress,enabled}) => (
        <TouchableHighlight onPress={onPress} style={{height:40,width:width/5,flex:1,alignItems:'center',justifyContent:'center',margin:5}} underlayColor= 'transparent'>
           <View style={{height:50,width:width/5,backgroundColor:(enabled?'lightgrey':buttonColor),alignItems:'center',justifyContent:'center',borderRadius:2,shadowOffset:{width: 2, height: 2},shadowColor:'black',shadowRadius:1,shadowOpacity:0.1}}>
               <Text style={{fontFamily:'AvenirNext-bold',color:'#ffffff'}}>{title}</Text>
           </View>
        </TouchableHighlight>
)

const ButtomButton = ({title,onPress,enabled,drawMode}) => (
        <TouchableHighlight onPress={onPress} style={{height:40,width:width/3.14,flex:1,alignItems:'center',justifyContent:'center',margin:5}} underlayColor= 'transparent'>
           <View style={{height:50,width:width/3.14,backgroundColor:(drawMode?(enabled?'#1565C0':'#2196F3'):'lightgrey'),alignItems:'center',justifyContent:'center',borderRadius:2}}>
               <Text style={{fontFamily:'AvenirNext-bold',color:'#ffffff'}}>{title}</Text>
           </View>
        </TouchableHighlight>
)

const Marker = require('./images/arrow.png')

class Home extends Component {
    constructor(props) {
    super(props);
    this.state = {
	    showData : false,
      drawMode : false,
      editMode : false,
      drawType :'freeHand',
      areas    : {
        circles : [],
        polygons : []
      },
      markers : [
        {
          coordinates : {latitude:50,longitude:50},
          id : 100,
          someData1:'someData1',
          someData2:'someData2',
          image: require('./images/pointer.png')
        },
        {
          coordinates : {latitude:40,longitude:40},
          id : 200,
          someData1:'someData1',
          someData2:'someData2',
          image: require('./images/pointer.png')
        }
      ],
      radius : 0,
      dragglebleMarkers : [
        {
          coordinates : {latitude:20,longitude:20},
          id : 100,
          someData1:'someData1',
          someData2:'someData2',
          image: require('./images/pointer.png')
        },
        {
          coordinates : {latitude:10,longitude:10},
          id : 200,
          someData1:'someData1',
          someData2:'someData2',
          image: require('./images/pointer.png')
        }
      ],
      enableGoogleMaps : false,
      drawWithInShape : []
    };
  }

  _handleDrawDone = () => {

    this.refs.Map.reset()
    var DataFromMap = this.refs.Map.data()
    /*
      AreaSelector gives back null as soon as it Mounted.
      this.refs.Map.data() is null until user draws on the Map on the drawMode true
    */
    if( DataFromMap !== null ){ /* Check to see if the Data Returned from Map is Null*/
        var newShapes = this.state.areas
        var newMarkers = this.state.markers
        /* Define temp Shapes object to hold data from Map */
        if( DataFromMap.type == 'circle' ){

            newShapes.circles.push({
              coordinates : DataFromMap.data.coordinates,
              radius : DataFromMap.data.radius,
              fillColor : randClr(),
              strokeColor : randClr(),
            })

        }else if( DataFromMap.type == 'polygon' ){
          newShapes.polygons.push({
            coordinates : DataFromMap.data.coordinates,
            fillColor : "rgba(88, 208, 232, 0.5)",
            strokeColor : "rgba(88, 208, 232, 0.5)",
            strokeWidth : 3,
            onPress : this._onPolygonPress
            /*pass a function as onPress to enable polygon onPress Event, this._onPolygonPress is  suppose
              to be a variable , passing a function this._onPolygonPress() immediately triggers the function.
            */
          })

        }else if( DataFromMap.type == 'markers' ){

            this.setState({
              markers: newMarkers.concat(DataFromMap.data)
            })
        }

        this.setState({
            areas : newShapes
        })

    }


    //disable edit mode if user is drawing, as this will render a push pins slowing down the performance

    this.setState({
      drawMode:!this.state.drawMode,
      editMode:false,
    })

  }
  _onPolygonPress = (e) =>{
    console.log('OnClick Event',e);
  }

  _slider() {
    // only show slider is the draw type is circle
    if(this.state.drawType == 'circle' && this.state.drawMode){
        return (
          <View style={{flexDirection:'row',justifyContent:'center',alignItems:'center',backgroundColor:'#90CAF9'}}>
            <Slider style={{height:50,width:width-120}}
              value = {(this.state.radius)/100}
              onValueChange={(value) => { this.setState( { radius:value*100 }, ()=>{this.refs.Map.setRadius(this.state.radius*100000)})}}
              onSlidingComplete = {() => {}}
            />
            <Text style={{width:120,color:'white',fontSize:15,textAlign:'center',fontWeight:'700'}}>
               {Math.floor(this.state.radius)} Miles
            </Text>
          </View>
        );
    }
    return(
        <View style={{height:60,width:width,backgroundColor:'white',flexDirection:'row'}}>
          <TouchableHighlight style ={{flex:1,width:width/2-10}} underlayColor = 'lightgrey' onPress = {() => {this.refs.Map.zoomIn()}}>
              <View style={{flex:1,width:width/2-10,margin:5,backgroundColor: buttonColor,alignItems:'center',justifyContent:'center'}}>
                  <Text style={{fontFamily:'AvenirNext-bold',color:'white'}}>Zoom In</Text>
              </View>
          </TouchableHighlight>
          <TouchableHighlight style ={{flex:1,width:width/2-10}} underlayColor = 'lightgrey' onPress = {() => {this.refs.Map.zoomOut()}}>
              <View style={{flex:1,width:width/2-10,margin:5,backgroundColor:buttonColor,alignItems:'center',justifyContent:'center'}}>
                  <Text style={{fontFamily:'AvenirNext-bold',color:'white'}}>Zoom Out</Text>
              </View>
          </TouchableHighlight>
        </View>
    )
  }

  _modelContent = () => {
    var points = (this.refs.Map != undefined)?this.refs.Map.data():[]
    var ImageURL  = (this.refs.Map != undefined)?this.refs.Map.getSnap():''
    return(
      <PointsList points = {points}
        image = {ImageURL} />
    )
  }

  _toggleDrawWithInShape(){

      this.setState({
        drawWithInShape:  this.state.drawWithInShape.length
                          ? []
                          : randp
      })
  }

  _handleMarkerClick = (markerClicked) => {
    console.log("This Marker is Clicked",markerClicked);
  }

  render() {
    return (
      <View style={{flex:1,backgroundColor:bgcolor}}>
          <Modal
          animationType={"slide"}
          transparent={false}
          visible={this.state.showData}
          onRequestClose={() => {alert("Modal has been closed.")}}>
            <View style={{flex:1}}>
                <TouchableHighlight onPress= {()=>{this.setState({showData:false})}}>
                  <View style={{flex:1, height:50, backgroundColor:'#90CAF9',alignItems:'center',justifyContent:'center'}}>
                    <Text style={{fontFamily:'AvenirNext-bold',marginLeft:20}}>Close</Text>
                  </View>
                </TouchableHighlight>
                <View style={{height:height, width:width}}>

                        {/* We are trying to access a component's method even before it is rendered
                          the Map is rendered after the points in the render tree, and ref is only set after the component is Mounted
                          so, access the refs of unmounted components returns undefined. Access the methods only after the Map is completly rendered and
                          ref is set.*/}
                        {this._modelContent()}
                </View>
            </View>
          </Modal>
          <View style={{flexDirection:'row',marginTop:20,backgroundColor:bgcolor}}>
              <TopButton onPress = {()=>{this.refs.Map.play()}}  title = 'Play' enabled = {this.state.drawMode}/>
              <TopButton onPress={()=>{this._handleDrawDone()}} title = {this.state.drawMode?'Save':'Draw'} enabled = {false}/>
              <TopButton onPress = {()=>{this.refs.Map.join()}} title= 'Join' enabled = {!this.state.drawMode}/>
              <TopButton onPress = {()=>{this.setState({markers:[],areas : { circles : [], polygons : []}},()=>this.refs.Map.reset())}} title= 'reset' enabled = {this.state.drawMode}/>
         </View>
         <View style={{flexDirection:'row',marginTop:15,marginBottom:15,backgroundColor:bgcolor}}>
              <TopButton onPress={()=>{this.refs.Map.undo()}} title= 'undo'enabled = {!this.state.drawMode}/>
              <TopButton onPress = {()=>{this.setState({editMode:!this.state.editMode})}}  title ={this.state.editMode?'Done':'Edit'} enabled = {!this.state.drawMode}/>
              <TopButton onPress = {()=>{this.refs.Map.userLocation()}} title= 'Locate' enabled = {false}/>
              <TopButton onPress={()=>{this.setState({showData:true})}} title= 'Points' enabled = {this.state.drawMode}/>
         </View>
          <AreaSelector
            ref = 'Map'
            editMode = {this.state.editMode} // Control the editMode
            drawMode = {this.state.drawMode} // Control DrawMode
            drawType = {this.state.drawType} // Control type of Drawing
            shapes = {this.state.areas}      // Pass Areas to showup on Map
            markers = {this.state.markers}   // Pass markers to showup on Map
            onMarkerClick = {this._handleMarkerClick}
            googleMaps = {this.state.enableGoogleMaps}
            drawWithInShape = {this.state.drawWithInShape}
            dragglebleMarkers = {this.state.dragglebleMarkers}
            />
            {this._slider()}
         <View style={{height:60, width:width,backgroundColor:bgcolor,flexDirection:'row',alignItems:'center',justifyContent:'center'}}>
            <ScrollView horizontal ={true} showsHorizontalScrollIndicator= {false}>
                <ButtomButton onPress = {()=>{this.setState({drawType:'freeHand'})}} title= 'Free Hand' enabled = {this.state.drawType == 'freeHand'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({drawType:'polyline'})}} title= 'Polyline' enabled = {this.state.drawType == 'polyline'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({drawType:'polygon'})}}  title= 'Polygon' enabled = {this.state.drawType == 'polygon'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({drawType:'circle'})}}  title= 'Circle' enabled = {this.state.drawType == 'circle'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({drawType:'freeLiner'})}}   title= 'FreeLiner' enabled = {this.state.drawType == 'freeLiner'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({drawType:'dropMarker'})}}   title= 'Drop Marker' enabled = {this.state.drawType == 'dropMarker'} drawMode = {this.state.drawMode}/>
                <ButtomButton onPress = {()=>{this.setState({enableGoogleMaps:!this.state.enableGoogleMaps})}}   title = {this.state.enableGoogleMaps?'Air Maps':'Google'} enabled = {!true}/>
                <ButtomButton
                  title = {'Draw Witin'}
                  enabled = {true}
                  onPress = {()=>{this._toggleDrawWithInShape()}}/>
            </ScrollView>
         </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

module.exports = Home
